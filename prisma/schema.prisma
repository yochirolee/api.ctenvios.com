// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  emailVerified   Boolean          @default(false)
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Your custom fields
  created_by      String?
  forwarder_id    Int?
  forwarder       Forwarder?       @relation(fields: [forwarder_id], references: [id])
  agency_id       Int?
  agency          Agency?          @relation(fields: [agency_id], references: [id])
  is_active       Boolean          @default(true)
  is_root         Boolean          @default(false)
  role            Roles            @default(AGENCY_SALES)
  invoices        Invoice[]
  // Better Auth relations
  sessions        Session[]
  accounts        Account[]
  invoice_history InvoiceHistory[]
  payments        Payment[]

  @@map("user")
}

model Agency {
  id               Int        @id @default(autoincrement())
  name             String
  address          String
  contact          String
  phone            String
  email            String
  logo             String?
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  forwarder_id     Int
  forwarder        Forwarder  @relation(fields: [forwarder_id], references: [id])
  parent_agency_id Int? // Clave for√°nea opcional
  parent_agency    Agency?    @relation("AgencyHierarchy", fields: [parent_agency_id], references: [id])
  child_agencies   Agency[]   @relation("AgencyHierarchy") // Hijas
  services         Service[] // Servicios que ofrece
  users            User[] // Usuarios que pertenecen a esta agencia
  rates            Rates[] // Tarifas personalizadas
  customers        Customer[]
  receivers        Receiver[]
  invoices         Invoice[]
  items            Item[]
  counters         Counter[]
}

model Customer {
  id                Int       @id @default(autoincrement())
  first_name        String
  middle_name       String?
  last_name         String
  second_last_name  String?
  identity_document String?   @unique
  email             String?   @unique
  mobile            String
  address           String?
  created_at        DateTime  @default(now())
  updated_at        DateTime  @updatedAt
  receivers         Receiver[]
  agency_id         Int?
  agency            Agency?   @relation(fields: [agency_id], references: [id])
  invoices          Invoice[]

  @@unique([mobile, first_name, last_name])
}

model Receiver {
  id               Int        @id @default(autoincrement())
  first_name       String
  middle_name      String?
  last_name        String
  second_last_name String
  passport         String?    @unique
  ci               String     @unique @db.VarChar(11)
  email            String?    @unique
  mobile           String?
  phone            String?
  address          String
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  customers        Customer[]
  agency_id        Int?
  agency           Agency?    @relation(fields: [agency_id], references: [id])
  province_id      Int
  province         Province   @relation(fields: [province_id], references: [id])
  city_id          Int
  city             City       @relation(fields: [city_id], references: [id])
  invoices         Invoice[]

  @@unique([mobile, ci, first_name, last_name])
}

model Province {
  id         Int       @id @default(autoincrement())
  name       String
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  cities     City[]
  receivers   Receiver[]
}

model City {
  id          Int       @id @default(autoincrement())
  name        String
  created_at  DateTime  @default(now())
  updated_at  DateTime  @updatedAt
  province_id Int
  province    Province  @relation(fields: [province_id], references: [id])
  receivers    Receiver[]
  carrier_rates CarrierRates[]
}

enum Roles {
  ROOT
  ADMINISTRATOR
  FORWARDER_RESELLER
  AGENCY_SALES
  AGENCY_ADMIN
  AGENCY_SUPERVISOR
  FORWARDER_ADMIN
  CARRIER_ADMIN
  MESSENGER
}

model Provider {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  address    String
  contact    String
  phone      String
  email      String
  logo       String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  services   Service[]
  forwarders Forwarder[]
}

model Forwarder {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  logo       String?
  address    String
  contact    String
  phone      String
  email      String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  services   Service[]
  agencies   Agency[]
  users      User[]
  providers  Provider[]
}

model Service {
  id           Int         @id @default(autoincrement())
  name         String      @unique
  description  String?
  created_at   DateTime    @default(now())
  updated_at   DateTime    @updatedAt
  service_type ServiceType
  forwarder_id Int
  forwarder    Forwarder   @relation(fields: [forwarder_id], references: [id])
  rates        Rates[]
  provider_id  Int
  provider     Provider    @relation(fields: [provider_id], references: [id])
  agencies     Agency[]
  is_active    Boolean     @default(true)
  invoices     Invoice[]
  items        Item[]
  carrier_id   Int?
  carrier      Carrier?     @relation(fields: [carrier_id], references: [id])
}

model Rates {
  id              Int     @id @default(autoincrement())
  name            String  @default("Nueva Tarifa")
  service_id      Int
  service         Service @relation(fields: [service_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  agency_id       Int
  agency          Agency  @relation(fields: [agency_id], references: [id])
  carrier_rates_id Int?
  carrier_rates   CarrierRates? @relation(fields: [carrier_rates_id], references: [id])
  agency_rate     Int   @default(0) // in cents
  public_rate     Int   @default(0) // in cents
  forwarders_rate Int   @default(125) // in cents
}

model Carrier {
  id         Int        @id @default(autoincrement())
  name       String     @unique
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  services    Service[]
  carrier_rates CarrierRates[]
}

model CarrierRates {
  id         Int        @id @default(autoincrement())
  carrier_id Int
  carrier    Carrier    @relation(fields: [carrier_id], references: [id])
  rate       Int        @default(0) // in cents
  city_id    Int
  rates      Rates[]
  city       City       @relation(fields: [city_id], references: [id])
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  }



model Invoice {
  id               Int              @id @default(autoincrement())
  user_id          String
  user             User             @relation(fields: [user_id], references: [id])
  agency_id        Int
  agency           Agency           @relation(fields: [agency_id], references: [id])
  customer_id      Int
  customer         Customer         @relation(fields: [customer_id], references: [id])
  receiver_id       Int
  receiver          Receiver          @relation(fields: [receiver_id], references: [id])
  service_id       Int
  service          Service          @relation(fields: [service_id], references: [id])
  items            Item[]
  rate             Int              @default(0) // in cents
  total_amount     Int              @default(0) // in cents
  paid_amount      Int              @default(0) // in cents
  payment_status   PaymentStatus    @default(PENDING)
  payments         Payment[]
  status           String
  created_at       DateTime         @default(now())
  updated_at       DateTime         @updatedAt
  invoice_history  InvoiceHistory[]
}

model InvoiceHistory {
  id             Int      @id @default(autoincrement())
  invoice_id     Int
  invoice        Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  user_id        String
  user           User     @relation(fields: [user_id], references: [id])
  changed_fields Json
  comment        String?
  created_at     DateTime @default(now())
}

model Item {
  hbl              String        @id
  description      String
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  weight           Float
  volume           Float         @default(0)
  service_id       Int
  service          Service       @relation(fields: [service_id], references: [id])
  quantity         Int           @default(1)
  rate             Int           @default(0)// in cents
  customs_fee      Float         @default(0)
  insurance_fee    Float?      @default(0)
  delivery_fee     Float?      @default(0)
  customs_rates_id Int?
  customs_rates    CustomsRates? @relation(fields: [customs_rates_id], references: [id])
  invoice_id       Int
  invoice          Invoice       @relation(fields: [invoice_id], references: [id], onDelete: Cascade, onUpdate: Cascade)
  agency_id        Int
  agency           Agency        @relation(fields: [agency_id], references: [id])
}


model Payment {
  id                Int           @id @default(autoincrement())
  invoice_id        Int
  invoice           Invoice       @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  amount            Int           @default(0) // in cents
  payment_method    PaymentMethod
  payment_reference String?
  payment_date      DateTime      @default(now())
  status            PaymentStatus @default(PENDING)
  notes             String?
  created_at        DateTime      @default(now())
  updated_at        DateTime      @updatedAt
  user_id           String
  user              User          @relation(fields: [user_id], references: [id])
}

model CustomsRates {
  id           Int      @id @default(autoincrement())
  name         String
  description  String?
  country_id   Int
  country      Country  @relation(fields: [country_id], references: [id])
  chapter      String?
  fee_type     FeeType  @default(UNIT)
  fee          Float
  max_quantity Int? // opcional, para limitar cantidad
  created_at   DateTime @default(now())
  updated_at   DateTime @updatedAt
  items        Item[]
}

model Country {
  id            Int            @id @default(autoincrement())
  name          String
  code          String         @unique
  customs_rates CustomsRates[]
}

enum FeeType {
  UNIT // Por unidad
  WEIGHT // Por peso (libra, kg, etc.)
  VALUE // Porcentaje o valor declarado (si aplica)
}

enum ServiceType {
  MARITIME
  AIR
}


enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  ZELLE
  CHECK
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  CANCELLED
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  
  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Counter {
  id         Int      @id @default(autoincrement())
  date       String
  agency_id  Int
  agency     Agency   @relation(fields: [agency_id], references: [id])
  counter    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([date, agency_id])
}
