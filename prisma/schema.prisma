// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider        = "prisma-client-js"
  previewFeatures = ["fullTextSearchPostgres"]
}

datasource db {
  provider  = "postgresql"
  url       = env("DATABASE_URL")
  directUrl = env("DIRECT_URL")
}

model User {
  id              String           @id @default(uuid())
  name            String
  email           String           @unique
  emailVerified   Boolean          @default(false)
  phone           String?
  image           String?
  createdAt       DateTime         @default(now())
  updatedAt       DateTime         @updatedAt
  // Your custom fields
  created_by      String?
  forwarder_id    Int?
  forwarder       Forwarder?       @relation(fields: [forwarder_id], references: [id])
  agency_id       Int?
  agency          Agency?          @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  role            Roles            @default(AGENCY_SALES)
  invoices        Invoice[]
  payments        Payment[]
  discounts       Discount[]
  invoice_history InvoiceHistory[]
  // Better Auth relations
  sessions        Session[]
  accounts        Account[]
  banned          Boolean?
  banReason       String?
  banExpires      DateTime?

  @@map("user")
}

model Agency {
  id               Int            @id @default(autoincrement())
  name             String
  address          String
  contact          String
  phone            String
  email            String         @unique
  logo             String?
  website          String?
  created_at       DateTime       @default(now())
  updated_at       DateTime       @updatedAt
  forwarder_id     Int
  forwarder        Forwarder      @relation(fields: [forwarder_id], references: [id])
  parent_agency_id Int?
  parent_agency    Agency?        @relation("AgencyHierarchy", fields: [parent_agency_id], references: [id], onDelete: SetNull)
  child_agencies   Agency[]       @relation("AgencyHierarchy")
  services         Service[]
  users            User[]
  shipping_rates   ShippingRate[]
  customers        Customer[]
  receivers        Receiver[]
  invoices         Invoice[]
  items            Item[]
  products         Product[]
  counters         Counter[]
  agency_type      AgencyType     @default(AGENCY)
  is_active        Boolean        @default(false)
  commission_rate  Float?         @default(0.0) // Commission percentage for hierarchy

  // Performance indexes
  @@index([forwarder_id, is_active])
  @@index([parent_agency_id])
  @@index([agency_type, is_active])
}

model Customer {
  id                Int        @id @default(autoincrement())
  first_name        String
  middle_name       String?
  last_name         String
  second_last_name  String?
  identity_document String?    @unique
  email             String?    @unique
  mobile            String
  address           String?
  created_at        DateTime   @default(now())
  updated_at        DateTime   @updatedAt
  receivers         Receiver[]
  agency_id         Int?
  agency            Agency?    @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  invoices          Invoice[]
  is_active         Boolean    @default(true)

  @@unique([mobile, first_name, last_name])
  @@index([agency_id, is_active])
  @@index([email])
  @@index([identity_document])
}

model Receiver {
  id               Int        @id @default(autoincrement())
  first_name       String
  middle_name      String?
  last_name        String
  second_last_name String
  passport         String?    @unique
  ci               String     @unique @db.VarChar(11)
  email            String?    @unique
  mobile           String?
  phone            String?
  address          String
  created_at       DateTime   @default(now())
  updated_at       DateTime   @updatedAt
  customers        Customer[]
  agency_id        Int?
  agency           Agency?    @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  province_id      Int
  province         Province   @relation(fields: [province_id], references: [id])
  city_id          Int
  city             City       @relation(fields: [city_id], references: [id])
  invoices         Invoice[]

  @@unique([mobile, ci, first_name, last_name])
}

model Province {
  id         Int        @id @default(autoincrement())
  name       String
  created_at DateTime   @default(now())
  updated_at DateTime   @updatedAt
  cities     City[]
  receivers  Receiver[]
}

model City {
  id            Int            @id @default(autoincrement())
  name          String
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  province_id   Int
  province      Province       @relation(fields: [province_id], references: [id])
  receivers     Receiver[]
  carrier_rates CarrierRates[]
}

model Provider {
  id         Int         @id @default(autoincrement())
  name       String      @unique
  address    String
  contact    String
  phone      String
  email      String
  logo       String?
  created_at DateTime    @default(now())
  updated_at DateTime    @updatedAt
  services   Service[]
  forwarders Forwarder[]
}

model Forwarder {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  logo           String?
  address        String
  contact        String
  phone          String
  email          String
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  services       Service[]
  agencies       Agency[]
  users          User[]
  providers      Provider[]
  carriers       Carrier[]
  shipping_rates ShippingRate[]
}

model Service {
  id             Int            @id @default(autoincrement())
  name           String         @unique
  description    String?
  created_at     DateTime       @default(now())
  updated_at     DateTime       @updatedAt
  service_type   ServiceType
  forwarder_id   Int
  forwarder      Forwarder      @relation(fields: [forwarder_id], references: [id])
  provider_id    Int
  provider       Provider       @relation(fields: [provider_id], references: [id])
  agencies       Agency[]
  is_active      Boolean        @default(true)
  invoices       Invoice[]
  items          Item[]
  shipping_rates ShippingRate[]
  carriers       Carrier[]
}

model Carrier {
  id            Int            @id @default(autoincrement())
  name          String         @unique
  created_at    DateTime       @default(now())
  updated_at    DateTime       @updatedAt
  services      Service[]
  carrier_rates CarrierRates[]

  forwarder_id Int
  forwarder    Forwarder @relation(fields: [forwarder_id], references: [id])
}

model CarrierRates {
  id                    Int      @id @default(autoincrement())
  carrier_id            Int
  carrier               Carrier  @relation(fields: [carrier_id], references: [id])
  carrier_rate_in_cents Int      @default(0) // in cents
  city_id               Int
  city                  City     @relation(fields: [city_id], references: [id])
  created_at            DateTime @default(now())
  updated_at            DateTime @updatedAt
}

model Invoice {
  id              Int              @id @default(autoincrement())
  user_id         String
  user            User             @relation(fields: [user_id], references: [id])
  agency_id       Int
  agency          Agency           @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  customer_id     Int
  customer        Customer         @relation(fields: [customer_id], references: [id])
  receiver_id     Int
  receiver        Receiver         @relation(fields: [receiver_id], references: [id])
  service_id      Int
  service         Service          @relation(fields: [service_id], references: [id])
  items           Item[]
  total_in_cents  Int              @default(0) // in cents
  paid_in_cents   Int              @default(0) // in cents
  charge_in_cents Int              @default(0) // in cents
  payment_status  PaymentStatus    @default(PENDING)
  payments        Payment[]
  discounts       Discount[]
  status          InvoiceStatus    @default(DRAFT)
  created_at      DateTime         @default(now())
  updated_at      DateTime         @updatedAt
  invoice_history InvoiceHistory[]

  // Performance indexes
  @@index([agency_id, created_at])
  @@index([customer_id])
  @@index([status, payment_status])
  @@index([user_id, created_at])
}

model Item {
  hbl                String   @id //tracking number
  description        String
  created_at         DateTime @default(now())
  updated_at         DateTime @updatedAt
  weight             Float
  volume             Float    @default(0)
  product_id         Int?
  product            Product? @relation(fields: [product_id], references: [id])
  service_id         Int
  service            Service  @relation(fields: [service_id], references: [id])
  quantity           Int      @default(1)
  // --- CAMPOS DE SNAPSHOT (PERFECTO) ---
  base_rate_in_cents Int      @default(0) // Precio del Forwarder
  rate_in_cents      Int      @default(0) // Precio final de venta por unidad
  cost_in_cents      Int      @default(0) // Costo para la agencia que vende (era agency_parent_rate)

  customs_fee_in_cents   Int           @default(0)
  insurance_fee_in_cents Int?          @default(0)
  delivery_fee_in_cents  Int?          @default(0)
  charge_fee_in_cents    Int?          @default(0)
  customs_rates_id       Int?
  customs_rates          CustomsRates? @relation(fields: [customs_rates_id], references: [id])

  invoice_id Int
  invoice    Invoice @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  agency_id  Int
  agency     Agency  @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  status     String  @default("PENDING")

  // El eslabon de oro: la tarifa que se uso.
  rate_id Int
  rate    ShippingRate @relation(fields: [rate_id], references: [id])

  @@index([invoice_id])
  @@index([agency_id, created_at])
  @@index([service_id, status])
  @@index([hbl])
}

enum RateType {
  FIXED
  WEIGHT
}

model ShippingRate {
  id          Int      @id @default(autoincrement())
  name        String   @default("Base Rate")
  description String
  service_id  Int?
  service     Service? @relation(fields: [service_id], references: [id], onDelete: Cascade)

  // --- CAMPOS DE PROPIEDAD ---
  agency_id    Int? // Opcional: una tarifa puede no pertenecer a una agencia (si es base)
  agency       Agency?   @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  forwarder_id Int // Opcional: una tarifa de agencia hereda esto de su padre
  forwarder    Forwarder @relation(fields: [forwarder_id], references: [id], onDelete: Cascade)

  // --- PRECIOS ---
  // Para una Tarifa Base del Forwarder: este es su precio de venta a la agencia.
  // Para una Tarifa de Agencia: este es el precio final de venta al cliente.
  rate_in_cents Int @default(0)

  // Para una Tarifa de Agencia: este es su costo (el rate_in_cents de la tarifa padre).
  cost_in_cents Int @default(0)

  // --- RELACIÓN DE HERENCIA (LA CLAVE) ---
  is_base_rate   Boolean        @default(false) // True si es una tarifa maestra del Forwarder
  parent_rate_id Int?           @unique // La tarifa de una agencia apunta a una tarifa base
  parent_rate    ShippingRate?  @relation("RateHierarchy", fields: [parent_rate_id], references: [id], onDelete: SetNull)
  child_rates    ShippingRate[] @relation("RateHierarchy") // Una tarifa base puede tener muchas tarifas de agencias hijas

  // ... resto de tus campos (min_weight, max_weight, etc.)
  is_active  Boolean   @default(false)
  created_at DateTime  @default(now())
  updated_at DateTime  @updatedAt
  items      Item[]
  products   Product[]
  rate_type  RateType  @default(WEIGHT)
  min_weight Float?    @default(0)
  max_weight Float?    @default(0)
  length     Float?    @default(0)
  width      Float?    @default(0)
  height     Float?    @default(0)
}

//Modifications to Test
model Product {
  id               Int           @id @default(autoincrement())
  name             String
  description      String?
  sku              String?
  image_url        String?
  created_at       DateTime      @default(now())
  updated_at       DateTime      @updatedAt
  agency_id        Int
  agency           Agency        @relation(fields: [agency_id], references: [id])
  stock            Int           @default(0)
  weight           Float         @default(0) // Peso en libras
  volume           Float         @default(0)
  cost_in_cents    Int           @default(0)
  sale_in_cents    Int           @default(0) // Puede servir como un precio de venta sugerido o base
  customs_rates_id Int?
  customs_rates    CustomsRates? @relation(fields: [customs_rates_id], references: [id])
  is_active        Boolean       @default(true)
  items            Item[]

  // --- CAMBIO IMPORTANTE ---
  // Esta relacion es clave. Si se establece, usualmente apuntara a una tarifa FIXED.
  // Si es null, el producto se cobra por peso usando una tarifa WEIGHT generica.
  shipping_rates ShippingRate[]
}

model InvoiceHistory {
  id             Int      @id @default(autoincrement())
  invoice_id     Int
  invoice        Invoice  @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  user_id        String
  user           User     @relation(fields: [user_id], references: [id])
  changed_fields Json
  comment        String?
  created_at     DateTime @default(now())
}

model Payment {
  id              Int           @id @default(autoincrement())
  invoice_id      Int
  invoice         Invoice       @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  amount_in_cents Int           @default(0) // in cents
  charge_in_cents Int           @default(0) // in cents
  method          PaymentMethod
  reference       String?
  date            DateTime      @default(now())
  status          PaymentStatus @default(PENDING)
  notes           String?
  created_at      DateTime      @default(now())
  updated_at      DateTime      @updatedAt
  user_id         String
  user            User          @relation(fields: [user_id], references: [id])
}

model Discount {
  id                Int          @id @default(autoincrement())
  name              String
  invoice_id        Int
  invoice           Invoice      @relation(fields: [invoice_id], references: [id], onDelete: Cascade)
  user_id           String
  user              User         @relation(fields: [user_id], references: [id], onDelete: Cascade)
  type              DiscountType
  description       String?
  discount_in_cents Int          @default(0) // in cents
  created_at        DateTime     @default(now())
}

model CustomsRates {
  id           Int       @id @default(autoincrement())
  name         String
  description  String?
  country_id   Int       @default(1)
  country      Country   @relation(fields: [country_id], references: [id])
  chapter      String?
  custom_value Float?
  fee_type     FeeType   @default(UNIT)
  fee_in_cents Int       @default(0)
  min_weight   Float?
  max_weight   Float?
  max_quantity Int? // opcional, para limitar cantidad
  created_at   DateTime  @default(now())
  updated_at   DateTime  @updatedAt
  items        Item[]
  products     Product[]
}

model Country {
  id            Int            @id @default(autoincrement())
  name          String
  code          String         @unique
  customs_rates CustomsRates[]
}

model Session {
  id        String   @id @default(uuid())
  expiresAt DateTime
  token     String   @unique
  createdAt DateTime @default(now())
  updatedAt DateTime @updatedAt
  ipAddress String?
  userAgent String?
  userId    String
  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)

  impersonatedBy String?

  @@map("session")
}

model Account {
  id                    String    @id @default(uuid())
  accountId             String
  providerId            String
  userId                String
  user                  User      @relation(fields: [userId], references: [id], onDelete: Cascade)
  accessToken           String?
  refreshToken          String?
  idToken               String?
  accessTokenExpiresAt  DateTime?
  refreshTokenExpiresAt DateTime?
  scope                 String?
  password              String?
  createdAt             DateTime  @default(now())
  updatedAt             DateTime  @updatedAt

  @@unique([providerId, accountId])
  @@map("account")
}

model Verification {
  id         String   @id @default(uuid())
  identifier String
  value      String
  expiresAt  DateTime
  createdAt  DateTime @default(now())
  updatedAt  DateTime @updatedAt

  @@unique([identifier, value])
  @@map("verification")
}

model Jwks {
  id         String   @id
  publicKey  String
  privateKey String
  createdAt  DateTime

  @@map("jwks")
}

model Counter {
  id         Int      @id @default(autoincrement())
  date       String
  agency_id  Int
  agency     Agency   @relation(fields: [agency_id], references: [id], onDelete: Cascade)
  counter    Int
  created_at DateTime @default(now())
  updated_at DateTime @updatedAt

  @@unique([date, agency_id])
}

enum AgencyType {
  AGENCY
  RESELLER
  FORWARDER
}

enum Roles {
  ROOT
  ADMINISTRATOR
  FORWARDER_RESELLER
  AGENCY_SALES
  AGENCY_ADMIN
  AGENCY_SUPERVISOR
  FORWARDER_ADMIN
  CARRIER_ADMIN
  MESSENGER
  USER
}

enum PaymentStatus {
  PENDING
  PAID
  PARTIALLY_PAID
  REFUNDED
  CANCELLED
}

enum PaymentMethod {
  CASH
  CREDIT_CARD
  DEBIT_CARD
  BANK_TRANSFER
  PAYPAL
  ZELLE
  CHECK
}

enum DiscountType {
  PERCENTAGE
  CASH
  RATE
  FIXED
  CUSTOM
}

enum ServiceType {
  MARITIME
  AIR
}

enum FeeType {
  UNIT // Por unidad
  WEIGHT // Por peso (libra, kg, etc.)
  VALUE // Porcentaje o valor declarado (si aplica)
}

enum InvoiceStatus {
  // 📦 Inicial
  DRAFT // Borrador, creada pero no confirmada
  CREATED // Pendiente de pago
  PAID // Pagada

  // 🚚 Procesamiento
  PROCESSING // En preparacion
  READY_FOR_PICKUP // Lista para recogida
  PACKED // Empacada
  AWAITING_SHIPMENT // Pendiente de envio

  // 📦 Consolidacion
  PARTIALLY_ON_PALLET // Algunos items montados en pallet
  ON_PALLET // Todos los items montados en pallet
  PARTIALLY_IN_CONTAINER // Algunos items en contenedor
  IN_CONTAINER // Todos los items en contenedor
  PARTIALLY_DISPATCHED // Algunos items despachados
  DISPATCHED // Todos los items despachados

  // ✈️ Transporte / Maritimo
  IN_TRANSIT // En transito hacia destino
  AT_WAREHOUSE // Llego al almacen destino
  CUSTOMS_CLEARANCE // En aduana
  HELD_BY_CUSTOMS // Retenida en aduana
  RELEASED_FROM_CUSTOMS // Liberada de aduana

  // 🚛 Entrega
  OUT_FOR_DELIVERY // En reparto
  PARTIALLY_DELIVERED // Algunos items entregados
  DELIVERED // Todos los items entregados
  FAILED_DELIVERY // Fallo la entrega

  // ⚠️ Especiales
  CANCELLED // Cancelada
  RETURNED // Devuelta
  REFUNDED // Reembolsada
  ON_HOLD // En espera
  ISSUE_REPORTED // Con incidencia reportada
}
